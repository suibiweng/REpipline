prompt_template: |
  Task: Generate a Unity-compatible JSON configuration that defines either:

  1. An interactive object using Lua scripting and optional particle effects, or  
  2. A standalone particle effect with no associated object.

  --

  Scene Context:
  - Premise: {premise}
  - Additional Detail: {prompt}
  - Physical Furniture in Scene: [{furniture}]
  - Virtual Objects in Scene: [{generate_spots}]

  --

  Existing Generated Objects:
  The following virtual or dynamic objects already exist in the scene. Consider their behavior and avoid duplicating effects or interaction logic.
  You may reference them only if they appear in the furniture or generateSpots lists.

  {existing_objects}

  --

  System Setup:
  - All physical objects (furniture) have colliders and rigidbodies and can detect collisions.
  - All objects support Lua scripting using:
    • start() – for initialization
    • update(deltaTime) – for animation/timers
    • onCollisionEnter(other) – for collisions
    • trigger() – explicitly called interaction

  --

  Allowed Lua Proxies and Helpers:
  You may use the following registered Lua proxies and functions:
  - transformProxy: Translate, Rotate, SetPosition, etc.
  - rigidbodyProxy: AddForce, SetUseGravity, etc.
  - audioSourceProxy: Play, Stop, SetVolume, SetLoop
  - textProxy, buttonProxy, animatorProxy, particleSystemProxy
  - activateEffect("effectName"), deactivateEffect()
  - Vector3(x, y, z), Color(r, g, b, a), Quaternion(x, y, z, w)

  --

  Particle Effects:
  Each effect must define:
  - effectName
  - duration
  - startColor (RGBA)
  - startSize
  - startSpeed
  - maxParticles
  - shape
  - emissionRate
  - lifetime

  Optional:
  - velocityOverLifetime
  - colorOverLifetime

  --

  Object Reference Constraints:
  - Only refer to object names from the Physical Furniture list when checking collisions like: if other.name == "..."
  - Do NOT invent object names.
  - If no valid object is available, use fallback logic like: if true then

  --

  Particle-Only Effects:
  If the result is purely a visual particle effect (not tied to an object):
  - "object": "" (empty string)
  - "lua_code": "" or empty
  - "particle_json": must still be complete and valid

  --

  Output Format:
  Return valid JSON using only the following keys:

  {
    "object": "ObjectName or empty string",
    "lua_code": "Lua script string (escaped with \\n and \\t for JSON compatibility)",
    "particle_json": [ { ParticleEffectDefinition(s) } ],
    "comment": "Brief explanation of logic and design choices",
    "created_at": "YYYY-MM-DDTHH:MM:SS"
  }

  Do not include markdown, explanations outside the JSON, or multiline Lua code blocks. The "lua_code" must be escaped as a single-line JSON string.
